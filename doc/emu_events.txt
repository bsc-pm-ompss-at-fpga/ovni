This file contains an exhaustive list of events supported by the emulator.

- Punctual events don't produce a state transition.
- All events refer to the current thread.
- Descriptions must be kept short.

**********************************************************
Please keep this list synchronized with the emulator code!
**********************************************************

MCV = Model Category Value

------------------------------------------------------------
MCV	Description
--------------------- Ovni (model=O) -----------------------

OHC	Creates a new thread (punctual event)
OHx	Begins the execution
OHp	Pauses the execution
OHc	Enters the cooling state (about to be paused)
OHw	Enters the warming state (about to be running)
OHe	Ends the execution

OAs	Switches it's own affinity to the given CPU
OAr	Remotely switches the affinity of the given thread

OB.	Emits a burst event to measure latency

-------------------- nOS-V (model=V) ----------------------

VTc	Creates a new task (punctual event)
VTx	Task execute
VTe	Task end
VTp	Task pause
VTr	Task resume

VYc	Task type create (punctual event)

VSr	Receives a task from another thread (punctual event)
VSs	Sends a task to another thread (punctual event)
VS@	Self-assigns itself a task (punctual event)
VSh	Enters the hungry state, waiting for a task
VSf	Is no longer hungry
VS[	Enters the scheduler server mode
VS]	Ends the scheduler server mode

VU[	Starts to submit a task
VU]	Ends the submission of a task

VMa	Starts allocating memory
VMA	Ends allocating memory
VMf	Starts freeing memory
VMF	Ends freeing memory

VAs	Enters nosv_submit()
VAS	Exits nosv_submit()
VAp	Enters nosv_pause()
VAP	Exits nosv_pause()
VAy	Enters nosv_yield()
VAY	Exits nosv_yield()
VAw	Enters nosv_waitfor()
VAW	Exits nosv_waitfor()
VAc	Enters nosv_schedpoint()
VAC	Exits nosv_schedpoint()

VHa	Enters nosv_attach()
VHA	Exits nosv_detach()
VHw	Begins the execution as a worker
VHW	Ends the execution as a worker
VHd	Begins the execution as the delegate
VHD	Ends the execution as the delegate

-------------------- TAMPI (model=T) ----------------------

TS[	Enters MPI_Send()
TS]	Exits MPI_Send()

TR[	Enters MPI_Recv()
TR]	Exits MPI_Recv()

Ts[	Enters MPI_Isend()
Ts]	Exits MPI_Isend()

Tr[	Enters MPI_Irecv()
Tr]	Exits MPI_Irecv()

TV[	Enters MPI_Wait()
TV]	Exits MPI_Wait()

TW[	Enters MPI_Waitall()
TW]	Exits MPI_Waitall()

-------------------- OpenMP (model=M) ----------------------

MT[	Task begins
MT]	Task ends

MP]	Parallel region begins
MP[	Parallel region ends

-------------------- Nanos6-Lite (model=L) ----------------------

LR[	Enters the registering of a task's accesses
LR]	Exits the registering of a task's accesses

LU[	Enters the unregistering of a task's accesses
LU]	Exits the unregistering of a task's accesses

LW[	Enters the blocking condition waiting for an If0 task
LW]	Exits the blocking condition waiting for an If0 task

LI[	Enters the inline execution of an If0 task
LI]	Exits the inline execution of an If0 task

LT[	Enters a taskwait
LT]	Exits a taskwait

LC[	Enters the creation of a task
LC]	Exits the creation of a task

LS[	Enters the submit of a task
LS]	Exits the submit of a task

LP[	Enters the spawning of a function
LP]	Exits the spawning of a function

